package com.gradle.example.codegenerator

import org.gradle.api.DefaultTask
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.provider.MapProperty
import org.gradle.api.provider.Property
import org.gradle.api.tasks.CacheableTask
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.Optional
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction
import java.io.File

@CacheableTask
abstract class CodeGeneratorTask : DefaultTask() {

    @get:OutputDirectory
    abstract val outputDirectory: DirectoryProperty

    @get:Input
    abstract val packageName: Property<String>

    @get:Input
    abstract val classes: MapProperty<String, String>

    @get:Input
    @get:Optional
    abstract val header: Property<String>

    @TaskAction
    fun greet() {
        outputDirectory.get().asFile.deleteRecursively()
        outputDirectory.get().asFile.mkdirs()
        val headerFile = if (header.isPresent) header.get() else defaultHeader
        val classGen = classes.get()
        classGen.forEach { (name, content) ->
            val file = File(outputDirectory.get().asFile, "$name.java")
            file.writeText("package ${packageName.get()};\n")
            file.appendText("$headerFile\n")
            file.appendText(content.trimIndent())
        }
    }

    private val defaultHeader = """
            /*
            *
            * Code generated by the awesome task
            *
            */
    """.trimIndent()
}
